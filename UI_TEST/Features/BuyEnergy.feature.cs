// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ensek.UITests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Buy Energy")]
    [NUnit.Framework.CategoryAttribute("ENSEK-ui-buy-energy")]
    public partial class BuyEnergyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "ENSEK-ui-buy-energy"};
        
#line 1 "BuyEnergy.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Features", "Buy Energy", "  As a customer\r\n  I want to purchase energy units\r\n  So that I can place an orde" +
                    "r", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Purchase valid quantity of <energyType>")]
        [NUnit.Framework.CategoryAttribute("ENSEK-ui-buy-energy-001")]
        [NUnit.Framework.CategoryAttribute("positive")]
        [NUnit.Framework.TestCaseAttribute("2", "Gas", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Electricity", null)]
        [NUnit.Framework.TestCaseAttribute("15", "Oil", null)]
        [NUnit.Framework.TestCaseAttribute("12", "Gas", null)]
        [NUnit.Framework.TestCaseAttribute("-12", "Gas", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "Electricity", null)]
        [NUnit.Framework.TestCaseAttribute("0", "Oil", null)]
        public void PurchaseValidQuantityOfEnergyType(string quantity, string energyType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ENSEK-ui-buy-energy-001",
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("quantity", quantity);
            argumentsOfScenario.Add("energyType", energyType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase valid quantity of <energyType>", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
    testRunner.Given("the user opens the Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.When(string.Format("the user notes the units available and buys \"{0}\" units of \"{1}\"", quantity, energyType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.Then(string.Format("the user should see a sale confirmation message for \"{0}\" with \"{1}\" units", energyType, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
    testRunner.And(string.Format("the user should see the Sale Confirmed units available for \"{0}\" are updated", energyType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Purchase with invalid quantity")]
        [NUnit.Framework.CategoryAttribute("ENSEK-ui-buy-energy-002")]
        [NUnit.Framework.CategoryAttribute("negative")]
        [NUnit.Framework.TestCaseAttribute("x", "Gas", null)]
        [NUnit.Framework.TestCaseAttribute("abc", "Electricity", null)]
        [NUnit.Framework.TestCaseAttribute("xyz", "Oil", null)]
        [NUnit.Framework.TestCaseAttribute("x1", "Gas", null)]
        public void PurchaseWithInvalidQuantity(string quantity, string energyType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ENSEK-ui-buy-energy-002",
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("quantity", quantity);
            argumentsOfScenario.Add("energyType", energyType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase with invalid quantity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
    testRunner.Given("the user opens the Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
    testRunner.When(string.Format("the user notes the units available and buys \"{0}\" units of \"{1}\"", quantity, energyType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
    testRunner.Then("the user should see an error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Purchase energy with various quantities and types")]
        [NUnit.Framework.CategoryAttribute("ENSEK-ui-buy-energy-003")]
        [NUnit.Framework.CategoryAttribute("mixed")]
        [NUnit.Framework.TestCaseAttribute("2", "Gas", "the user should see the Sale Confirmed units available for \"Gas\" are updated", null)]
        [NUnit.Framework.TestCaseAttribute("-3", "Electricity", "the user should see an error message", null)]
        public void PurchaseEnergyWithVariousQuantitiesAndTypes(string quantity, string energyType, string expectedResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ENSEK-ui-buy-energy-003",
                    "mixed"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("quantity", quantity);
            argumentsOfScenario.Add("energyType", energyType);
            argumentsOfScenario.Add("expectedResult", expectedResult);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase energy with various quantities and types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
    testRunner.Given("the user opens the Buy Energy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
    testRunner.When(string.Format("the user buys \"{0}\" units of \"{1}\"", quantity, energyType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then(string.Format("the user should see a sale confirmation message for \"{0}\" with \"{1}\" units", energyType, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.Then(string.Format("{0}", expectedResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
